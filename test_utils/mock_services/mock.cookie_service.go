// Code generated by MockGen. DO NOT EDIT.
// Source: services/cookie_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCookieService is a mock of CookieService interface.
type MockCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockCookieServiceMockRecorder
}

// MockCookieServiceMockRecorder is the mock recorder for MockCookieService.
type MockCookieServiceMockRecorder struct {
	mock *MockCookieService
}

// NewMockCookieService creates a new mock instance.
func NewMockCookieService(ctrl *gomock.Controller) *MockCookieService {
	mock := &MockCookieService{ctrl: ctrl}
	mock.recorder = &MockCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieService) EXPECT() *MockCookieServiceMockRecorder {
	return m.recorder
}

// DeleteCookie mocks base method.
func (m *MockCookieService) DeleteCookie(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockCookieServiceMockRecorder) DeleteCookie(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockCookieService)(nil).DeleteCookie), ctx, key)
}

// GetCookieValue mocks base method.
func (m *MockCookieService) GetCookieValue(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookieValue", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookieValue indicates an expected call of GetCookieValue.
func (mr *MockCookieServiceMockRecorder) GetCookieValue(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookieValue", reflect.TypeOf((*MockCookieService)(nil).GetCookieValue), ctx, key)
}

// SetCookie mocks base method.
func (m *MockCookieService) SetCookie(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCookie", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockCookieServiceMockRecorder) SetCookie(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockCookieService)(nil).SetCookie), ctx, key, value)
}
